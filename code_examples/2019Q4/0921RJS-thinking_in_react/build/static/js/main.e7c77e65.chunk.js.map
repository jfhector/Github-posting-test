{"version":3,"sources":["components/SearchBar.tsx","data/productData.ts","components/ProductTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBar","props","searchString","searchStringHandleChange","showOnlyStocked","showOnlyStockedHandleChange","htmlFor","type","id","onChange","value","checked","productDataFromDatabase","category","price","stocked","name","ProductTable","filteredProductData","productCategories","Set","map","productDataItem","productCategory","productCategoryIndex","key","scope","filter","filteredProductDataItem","productItem","productItemIndex","className","productData","toUpperCase","includes","App","state","bind","e","this","setState","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SASaA,G,MAAY,SAACC,GAAkB,IAChCC,EAAyFD,EAAzFC,aAAcC,EAA2EF,EAA3EE,yBAA0BC,EAAiDH,EAAjDG,gBAAiBC,EAAgCJ,EAAhCI,4BAEjE,OACI,6BACI,6BACI,2BAAOC,QAAQ,gBAAf,qCACA,2BAAOC,KAAK,OAAOC,GAAG,eAAeC,SAAUN,EAA0BO,MAAOR,KAGpF,6BACI,2BAAOK,KAAK,WAAWC,GAAG,6BAA6BC,SAAUJ,EAA6BM,QAASP,IACvG,2BAAOE,QAAQ,8BAAf,mCClBHM,EAA0B,CACnC,CAACC,SAAU,iBAAkBC,MAAO,SAAUC,SAAS,EAAMC,KAAM,YACnE,CAACH,SAAU,iBAAkBC,MAAO,QAASC,SAAS,EAAMC,KAAM,YAClE,CAACH,SAAU,iBAAkBC,MAAO,SAAUC,SAAS,EAAOC,KAAM,cACpE,CAACH,SAAU,cAAeC,MAAO,SAAUC,SAAS,EAAMC,KAAM,cAChE,CAACH,SAAU,cAAeC,MAAO,UAAWC,SAAS,EAAOC,KAAM,YAClE,CAACH,SAAU,cAAeC,MAAO,UAAWC,SAAS,EAAMC,KAAM,Y,OCFxDC,EAAe,SAAChB,GAAkB,IACnCiB,EAAwBjB,EAAxBiB,oBAiBFC,EAAiB,YAAO,IAAIC,IAAIF,EAAoBG,KAAI,SAAAC,GAAe,OAAIA,EAAgBT,cAEjG,OACI,6BAEQM,EAAkBE,KAAI,SAACE,EAAiBC,GAAlB,OAElB,yBAAKC,IAAKD,GACN,4BAAKD,GAEL,+BACI,+BACI,4BACI,wBAAIG,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAIR,+BACKR,EAAoBS,QAAO,SAAAC,GAAuB,OAAIA,EAAwBf,WAAaU,KAAiBF,KAAI,SAACQ,EAAaC,GAAd,OAE7G,wBAAIL,IAAKK,GACL,wBAAIC,UAAYF,EAAYd,QAA2B,GAAjB,gBAAsBc,EAAYb,MACxE,4BAAKa,EAAYf,mBC1CzD,SAASI,EAAoBc,EAA0B9B,EAAsBE,GACzE,OAAO4B,EAAYL,QACf,SAAAL,GAAe,QACTlB,GAAmBA,GAAmBkB,EAAgBP,UACrDO,EAAgBN,KAAKiB,cAAcC,SAAShC,EAAa+B,kB,IAuDzDE,E,YA7CX,WAAYlC,GAAY,IAAD,8BACnB,4CAAMA,KAEDmC,MAAQ,CACTlC,aAAc,GACdE,iBAAiB,GAGrB,EAAKD,yBAA2B,EAAKA,yBAAyBkC,KAA9B,gBAChC,EAAKhC,4BAA8B,EAAKA,4BAA4BgC,KAAjC,gBAThB,E,sFAYEC,GACrBC,KAAKC,SAAS,CAACtC,aAAcoC,EAAEG,OAAO/B,U,kDAGd4B,GACxBC,KAAKC,SAAS,CAACpC,gBAAiBkC,EAAEG,OAAO9B,Y,+BAGnC,IAAD,EACqC4B,KAAKH,MAAvChC,EADH,EACGA,gBAAiBF,EADpB,EACoBA,aAEzB,OACI,6BACI,6BACI,kBAAC,EAAD,CACIA,aAAcA,EACdC,yBAA0BoC,KAAKpC,yBAC/BC,gBAAiBA,EACjBC,4BAA6BkC,KAAKlC,+BAG1C,6BACI,kBAAC,EAAD,CACIa,oBACIA,EAAoBN,EAAyBV,EAAcE,W,GArCrEsC,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7c77e65.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\n\ntype Props = {\n    searchString: string,\n    searchStringHandleChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    showOnlyStocked: boolean,\n    showOnlyStockedHandleChange: (e: ChangeEvent<HTMLInputElement>) => void,\n}\n\nexport const SearchBar = (props: Props) => {\n    const { searchString, searchStringHandleChange, showOnlyStocked, showOnlyStockedHandleChange } = props;\n\n    return (\n        <div>\n            <div>\n                <label htmlFor=\"search-input\">What product are you looking for?</label>\n                <input type=\"text\" id=\"search_input\" onChange={searchStringHandleChange} value={searchString}/>\n            </div>\n\n            <div>\n                <input type=\"checkbox\" id=\"only_show_stocked_checkbox\" onChange={showOnlyStockedHandleChange} checked={showOnlyStocked} />\n                <label htmlFor=\"only_show_stocked_checkbox\">Only show products in stock</label>\n            </div>\n        </div>\n    );\n};\n","export type ProductData = typeof productDataFromDatabase;\nexport type ProductItem = typeof productDataFromDatabase[0];\n\nexport const productDataFromDatabase = [\n    {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n    {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n    {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n    {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n    {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n    {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];\n\n","import React from 'react';\nimport { ProductData } from './../data/productData';\n\ntype Props = {\n    filteredProductData: ProductData,\n}\n\nexport const ProductTable = (props: Props) => {\n    const { filteredProductData } = props;\n\n    // No idea why that didn't work. Next step would be to try it in JS, to see if it works.\n    // const categoriesInFilteredProductData = filteredProductData.reduce(\n        //     (accumulator: Array<string>, currentValue: ProductItem) => {\n            //         if (!accumulator.includes(currentValue.category)) {\n                //             let copyOfAccumulator = accumulator;\n                //             let result = copyOfAccumulator.push(currentValue.category);\n                //             return result;\n                //         } else {\n                    //             return accumulator;\n                    //         }\n                    //     },\n                    //     []\n                    // );\n                    \n    // I use this as a much simpler alternative. It works really well\n    const productCategories = [...new Set(filteredProductData.map(productDataItem => productDataItem.category))];\n    \n    return (\n        <div>\n            {\n                productCategories.map((productCategory, productCategoryIndex) => (\n        \n                    <div key={productCategoryIndex}>\n                        <h2>{productCategory}</h2>\n        \n                        <table>\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Name</th>\n                                    <th scope=\"col\">Price</th>\n                                </tr>\n                            </thead>\n        \n                            <tbody>\n                                {filteredProductData.filter(filteredProductDataItem => filteredProductDataItem.category === productCategory).map((productItem, productItemIndex) => (\n            \n                                    <tr key={productItemIndex}>\n                                        <td className={!productItem.stocked ? 'out-of-stock' : ''}>{productItem.name}</td>\n                                        <td>{productItem.price}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ))\n            }\n        </div>\n    );\n};\n","import React, { ChangeEvent } from 'react';\nimport './App.css';\nimport { SearchBar } from './components/SearchBar';\nimport { productDataFromDatabase, ProductData } from './data/productData';\nimport { ProductTable } from './components/ProductTable';\n\nfunction filteredProductData(productData: ProductData, searchString: string, showOnlyStocked: boolean): ProductData {\n    return productData.filter(\n        productDataItem => \n            (!showOnlyStocked || showOnlyStocked && productDataItem.stocked)\n            && productDataItem.name.toUpperCase().includes(searchString.toUpperCase())\n    );\n}\n\ntype State = {\n    showOnlyStocked: boolean,\n    searchString: string,\n}\n\nclass App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            searchString: '',\n            showOnlyStocked: false,\n        };\n\n        this.searchStringHandleChange = this.searchStringHandleChange.bind(this);\n        this.showOnlyStockedHandleChange = this.showOnlyStockedHandleChange.bind(this);\n    }\n\n    searchStringHandleChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({searchString: e.target.value});\n    }\n\n    showOnlyStockedHandleChange(e: ChangeEvent<HTMLInputElement>) {\n        this.setState({showOnlyStocked: e.target.checked});\n    }\n\n    render() {\n        const { showOnlyStocked, searchString } = this.state;\n\n        return (\n            <div>\n                <div>\n                    <SearchBar\n                        searchString={searchString}\n                        searchStringHandleChange={this.searchStringHandleChange}\n                        showOnlyStocked={showOnlyStocked}\n                        showOnlyStockedHandleChange={this.showOnlyStockedHandleChange} />\n                </div>\n\n                <div>\n                    <ProductTable\n                        filteredProductData={\n                            filteredProductData(productDataFromDatabase, searchString, showOnlyStocked)\n                        }\n                    />\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}